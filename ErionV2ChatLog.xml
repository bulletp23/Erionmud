<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
    <plugin
    name="Chat_Capture_Miniwindow_Tabs"
    author="Aeoln - Updated by Wulfgar"
    id="565dae21eb816a2fdb8d50f9"
    language="Lua"
    purpose="Move chats to a miniwindow with tabs for Erion"
    date_written="2025-10-15"
    date_modified="2025-10-15"
    requires="4.52"
    version="3.0"
    save_state="y"
    >
    
<description trim="y">
USAGE:

  chats help       : show detailed help information
  chats echo on    : echo chats in main window
  chats echo off   : do not echo chats
  chats show       : show chats window
  chats hide       : hide chats window
  chats tab N      : switch to tab N
  chats addtab     : add a new tab
  chats nametab NAME : name current tab
  chats cleartab   : clear current tab's contents
  
  LH-click a line to copy it to the clipboard
  RH-click main window to see menu of options
  Click tabs to switch between them
  RH-click on a tab for tab-specific options
  
  Click title bar to drag window.
</description>
  
</plugin>

<triggers>
    <trigger
    enabled="y"
    name="trig_says_1"
    match="You say, '*'"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_mudevent"
    match="<[mudevent]> *"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_friend_1"
    match="(Friend): *"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_client"
    match="[client] * *"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_tells_1"
    match="(Reply)>*"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_says_2"
    match="You ask, *"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_quests_1"
    match="The next item to retrieve is*"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_quests_2"
    match="Another player is inquiring if you are botting. They asked:"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_quests_3"
    match="*** Bot Check! ***"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_fighting_1"
    match="[Fighting] (Friend)>*"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_friend_2"
    match="(Friend)>*"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_deaths"
    match="[Player Deaths] *"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_beeps_1"
    match="You beep *"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_beeps_2"
    match="* beeps you, *"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_secrets_1"
    match="[secrets] *"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_yells_1"
    match="You yell*"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_yells_2"
    match="* yells*"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_faith"
    match="[faith] *"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_says_3"
    match="* asks, '*'"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_quote"
    match="[quote] *"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_group_1"
    match="(Gtell* *"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_group_2"
    match="(Group*"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_says_4"
    match="* *, '*'"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_quests_4"
    match="The next item to find is*"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_newbie"
    match="[newbie] *"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_global_1"
    match="<<< * has killed the 2000th monster!*"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_auction"
    match="Auction: *"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_tells_2"
    match="You reply to *, '*'"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_quests_5"
    match="Return to the Expedition giver before your time runs out!"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_quests_6"
    match="The Giver says to you, '*'"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_secrets_2"
    match="[secret] *"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_tells_3"
    match="From afar, *"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger> 

    <trigger
    enabled="y"
    name="trig_chat"
    match="[chat] *"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_scramble_1"
    match="[SCRAMBLE] Can you unscramble the phrase?"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_scramble_phrase"
    match="The scrambled phrase is: *"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_scramble_2"
    match="[GUESS] *"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_global_2"
    match="[Global *] *"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

   <trigger
    enabled="y"
    name="trig_quests_7"
    match="The next target to kill is *"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_tells_4"
    match="* replies to you, '*'"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_tells_5"
    match="* tells you, '*'"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_fighting_2"
    match="[Fighting] *"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_rankings"
    match="[Rankings] *"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_tells_6"
    match="You tell *, '*'"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_group_3"
    match="You tell the group, '*'"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>

    <trigger
    enabled="y"
    name="trig_group_4"
    match="* tells the group, '*'"
    script="chats"
    omit_from_output="y"
    sequence="100"
    ></trigger>
</triggers>

<aliases>
    <alias
    script="chat_help"
    match="chats help"
    enabled="y"
    sequence="100"
    ignore_case="y"
    ></alias>

    <alias
    script="chat_echo"
    match="^chats echo( on| off)?$"
    enabled="y"
    regexp="y"
    sequence="100"
    ignore_case="y"
    ></alias>

    <alias
    script="chat_show"
    match="chats show"
    enabled="y"
    sequence="100"
    ignore_case="y"
    ></alias>

    <alias
    script="chat_hide"
    match="chats hide"
    enabled="y"
    sequence="100"
    ignore_case="y"
    ></alias>

    <alias
    script="chat_tab"
    match="^chats tab (\d+)$"
    enabled="y"
    regexp="y"
    sequence="100"
    ignore_case="y"
    ></alias>

    <alias
    script="chat_addtab"
    match="chats addtab"
    enabled="y"
    sequence="100"
    ignore_case="y"
    ></alias>

    <alias
    script="chat_nametab"
    match="^chats nametab (.+)$"
    enabled="y"
    regexp="y"
    sequence="100"
    ignore_case="y"
    ></alias>

    <alias
    script="chat_cleartab"
    match="chats cleartab"
    enabled="y"
    sequence="100"
    ignore_case="y"
    ></alias>

    <alias
    script="chat_filters"
    match="chats filters"
    enabled="y"
    sequence="100"
    ignore_case="y"
    ></alias>
        
</aliases>

<script>
<![CDATA[

require "movewindow"
require "copytable"
require "serialize"

BODY_FONT_NAME = "Courier New"
BODY_FONT_SIZE = 11
SCROLL_BAR_WIDTH = 15
MAX_LINES = 10000

TIMESTAMP_TEXT_COLOUR = "white"
TIMESTAMP_BACK_COLOUR = "black"

timestamp = not (GetVariable("timestamp") == "false")
echo = not (GetVariable("echo") == "false")

date_format = GetVariable("date_format")
WINDOW_WIDTH = tonumber(GetVariable("WINDOW_WIDTH"))
WINDOW_HEIGHT = tonumber(GetVariable("WINDOW_HEIGHT"))

TEXT_INSET = 5

-- Tab system variables
num_tabs = tonumber(GetVariable("num_tabs")) or 1
current_tab = tonumber(GetVariable("current_tab")) or 1
tabs_names = {}
tabs_activity = {}
tabs_lines = {}
tabs_rawlines = {}
tabs_lineStart = {}
tabs_lineEnd = {}
tabs_filters = {}

loadstring(GetVariable("tabs_names") or "")()
loadstring(GetVariable("tabs_activity") or "")()
loadstring(GetVariable("tabs_filters") or "")()

-- Define available chat types for filtering
chat_types = {
    ["tells"] = "Tells and Replies",
    ["beeps"] = "Beeps",
    ["says"] = "Says and Asks",
    ["yells"] = "Yells",
    ["group"] = "Group Chat (Gtell/Group)",
    ["friend"] = "Friend Channel",
    ["secrets"] = "Secrets Channel",
    ["faith"] = "Faith Channel",
    ["quote"] = "Quote Channel",
    ["chat"] = "Chat Channel",
    ["newbie"] = "Newbie Channel",
    ["auction"] = "Auction",
    ["global"] = "Global Messages",
    ["scramble"] = "Scramble/Guess",
    ["fighting"] = "Fighting Channel",
    ["deaths"] = "Player Deaths",
    ["quests"] = "Quest/Expedition Messages",
    ["rankings"] = "Rankings",
    ["mudevent"] = "MUD Events",
    ["client"] = "Client Messages",
    ["other"] = "Other Messages"
}

-- Initialize tab data structures
for i = 1, num_tabs do
    tabs_names[i] = tabs_names[i] or nil
    tabs_activity[i] = tabs_activity[i] or false
    tabs_lines[i] = tabs_lines[i] or {}
    tabs_rawlines[i] = tabs_rawlines[i] or {}
    tabs_lineStart[i] = tabs_lineStart[i] or 1
    tabs_lineEnd[i] = tabs_lineEnd[i] or 1
    
    -- Initialize filters - default to capturing everything
    if not tabs_filters[i] then
        tabs_filters[i] = {}
        for key, _ in pairs(chat_types) do
            tabs_filters[i][key] = true
        end
    end
end

-- Current working variables (point to current tab)
lines = tabs_lines[current_tab]
rawlines = tabs_rawlines[current_tab]
lineStart = tabs_lineStart[current_tab]
lineEnd = tabs_lineEnd[current_tab]

WINDOW_COLUMNS = ""
WINDOW_LINES = ""

TAB_HEIGHT = 22
TAB_PADDING = 12
TAB_SPACING = 2

theme = {
    WINDOW_BACKGROUND = ColourNameToRGB ("#1a1a1a"),
    WINDOW_BORDER = ColourNameToRGB("#3a3a3a"),
    
    HIGHLIGHT=ColourNameToRGB("#505050"),
    FACE=ColourNameToRGB("#2d2d2d"),
    INNERSHADOW=ColourNameToRGB("#0a0a0a"),
    OUTERSHADOW = ColourNameToRGB("#000000"),
   
    BACK_FACE = ColourNameToRGB ("#252525"),
    DETAIL = ColourNameToRGB ("#ffffff"),

    TAB_ACTIVE_BG = ColourNameToRGB("#2d2d2d"),
    TAB_ACTIVE_TEXT = ColourNameToRGB("#ffffff"),
    TAB_INACTIVE_BG = ColourNameToRGB("#1f1f1f"),
    TAB_INACTIVE_TEXT = ColourNameToRGB("#808080"),
    TAB_HOVER_BG = ColourNameToRGB("#3a3a3a"),
    TAB_HOVER_TEXT = ColourNameToRGB("#ffffff"),
    TAB_HIGHLIGHT_BG = ColourNameToRGB("#4a5f3a"),
    TAB_HIGHLIGHT_TEXT = ColourNameToRGB("#c8ff96"),
    TAB_BAR_BG = ColourNameToRGB("#1a1a1a"),

    TITLE_HEIGHT = 20,
    SUBTITLE_HEIGHT = 20,
    TITLE_FONT_NAME = "Dina",
    TITLE_FONT_SIZE = 12
}

function DrawThemed3DRect(Window, left, top, right, bottom)
    WindowRectOp(Window, miniwin.rect_fill, left, top, right, bottom, theme.FACE)
    WindowLine(Window, left, top, right, top, theme.HIGHLIGHT, 
                miniwin.pen_solid + miniwin.pen_endcap_flat, 1)
    WindowLine(Window, left, top, left, bottom, theme.HIGHLIGHT, 
                miniwin.pen_solid + miniwin.pen_endcap_flat, 1)
    WindowLine(Window, left, bottom-2, right, bottom-2, theme.INNERSHADOW, 
                miniwin.pen_solid + miniwin.pen_endcap_flat, 1)
    WindowLine(Window, right-2, top, right-2, bottom-2, theme.INNERSHADOW, 
                miniwin.pen_solid + miniwin.pen_endcap_flat, 1)
    WindowLine(Window, left, bottom-1, right, bottom-1, theme.OUTERSHADOW, 
                miniwin.pen_solid + miniwin.pen_endcap_flat, 1)
    WindowLine(Window, right-1, top, right-1, bottom-1, theme.OUTERSHADOW, 
                miniwin.pen_solid + miniwin.pen_endcap_flat, 1)    
end

function DrawThemedResizeTag(Window, x1, y1, size)
    local x2, y2 = x1+size, y1+size
    DrawThemed3DRect(Window, x1, y1, x2, y2)
    local m = 2
    local n = 2
    while (x1+m+2 <= x2-3 and y1+n+1 <= y2-4) do
        WindowLine(Window, x1+m+1, y2-4, x2-3, y1+n, theme.HIGHLIGHT, 
                    miniwin.pen_solid, 1)
        WindowLine(Window, x1+m+2, y2-4, x2-3, y1+n+1, theme.INNERSHADOW, 
                    miniwin.pen_solid, 1)
        m = m+3
        n = n+3
    end
end

Win = GetPluginID()
font_height = ""
line_height = ""
windowinfo = ""
startx = ""
starty = ""
mouseover_tab = nil

function setTab(tab_num)
    if tab_num < 1 or tab_num > num_tabs then
        return
    end
    
    current_tab = tab_num
    lines = tabs_lines[current_tab]
    rawlines = tabs_rawlines[current_tab]
    lineStart = tabs_lineStart[current_tab]
    lineEnd = tabs_lineEnd[current_tab]
    
    tabs_activity[current_tab] = false
    
    init(false)
end

function addTab()
    num_tabs = num_tabs + 1
    tabs_names[num_tabs] = nil
    tabs_activity[num_tabs] = false
    tabs_lines[num_tabs] = {}
    tabs_rawlines[num_tabs] = {}
    tabs_lineStart[num_tabs] = 1
    tabs_lineEnd[num_tabs] = 1
    
    -- Initialize new tab with all filters enabled
    tabs_filters[num_tabs] = {}
    for key, _ in pairs(chat_types) do
        tabs_filters[num_tabs][key] = true
    end
    
    setTab(num_tabs)
    ColourNote("yellow", "", "New tab created. Tab " .. num_tabs .. " is now active.")
end

function getChatType(trigger_name)
    -- Map trigger name prefix to chat type categories
    if trigger_name:match("^trig_tells_") then
        return "tells"
    elseif trigger_name:match("^trig_beeps_") then
        return "beeps"
    elseif trigger_name:match("^trig_says_") then
        return "says"
    elseif trigger_name:match("^trig_yells_") then
        return "yells"
    elseif trigger_name:match("^trig_group_") then
        return "group"
    elseif trigger_name:match("^trig_friend_") then
        return "friend"
    elseif trigger_name:match("^trig_secrets_") then
        return "secrets"
    elseif trigger_name:match("^trig_faith") then
        return "faith"
    elseif trigger_name:match("^trig_quote") then
        return "quote"
    elseif trigger_name:match("^trig_chat") then
        return "chat"
    elseif trigger_name:match("^trig_newbie") then
        return "newbie"
    elseif trigger_name:match("^trig_auction") then
        return "auction"
    elseif trigger_name:match("^trig_global_") then
        return "global"
    elseif trigger_name:match("^trig_scramble_") or trigger_name == "trig_scramble_phrase" then
        return "scramble"
    elseif trigger_name:match("^trig_fighting_") then
        return "fighting"
    elseif trigger_name:match("^trig_deaths") then
        return "deaths"
    elseif trigger_name:match("^trig_quests_") then
        return "quests"
    elseif trigger_name:match("^trig_rankings") then
        return "rankings"
    elseif trigger_name:match("^trig_mudevent") then
        return "mudevent"
    elseif trigger_name:match("^trig_client") then
        return "client"
    else
        return "other"
    end
end

function nameTab(tab_num, name)
    if tab_num >= 1 and tab_num <= num_tabs then
        tabs_names[tab_num] = name
        refresh()
        ColourNote("yellow", "", "Tab " .. tab_num .. " named: " .. name)
    end
end

function drawTabs()
    if num_tabs <= 1 then
        return
    end
    
    local tab_top = theme.TITLE_HEIGHT + 2
    local tab_left = 2
    
    -- Draw tab bar background
    WindowRectOp(Win, miniwin.rect_fill, 0, tab_top, WINDOW_WIDTH, tab_top + TAB_HEIGHT + 4, theme.TAB_BAR_BG)
    
    -- Draw a subtle line at the bottom of tab bar
    WindowLine(Win, 0, tab_top + TAB_HEIGHT + 3, WINDOW_WIDTH, tab_top + TAB_HEIGHT + 3, theme.WINDOW_BORDER, miniwin.pen_solid, 1)
    
    for i = 1, num_tabs do
        local tab_name = tabs_names[i] or ("Tab " .. i)
        local tab_width = WindowTextWidth(Win, "titlefont"..Win, tab_name) + (TAB_PADDING * 2)
        
        local bg_color
        local text_color
        local draw_underline = false
        
        if i == current_tab then
            bg_color = theme.TAB_ACTIVE_BG
            text_color = theme.TAB_ACTIVE_TEXT
            draw_underline = true
        elseif tabs_activity[i] then
            bg_color = theme.TAB_HIGHLIGHT_BG
            text_color = theme.TAB_HIGHLIGHT_TEXT
        elseif i == mouseover_tab then
            bg_color = theme.TAB_HOVER_BG
            text_color = theme.TAB_HOVER_TEXT
        else
            bg_color = theme.TAB_INACTIVE_BG
            text_color = theme.TAB_INACTIVE_TEXT
        end
        
        -- Draw tab background with rounded top corners
        WindowRectOp(Win, miniwin.rect_fill, tab_left, tab_top + 2, tab_left + tab_width, tab_top + TAB_HEIGHT + 2, bg_color)
        
        -- Draw subtle top border for inactive tabs
        if i ~= current_tab then
            WindowLine(Win, tab_left, tab_top + 2, tab_left + tab_width, tab_top + 2, theme.HIGHLIGHT, miniwin.pen_solid, 1)
        end
        
        -- Draw side borders for separation
        if i > 1 then
            WindowLine(Win, tab_left, tab_top + 2, tab_left, tab_top + TAB_HEIGHT + 2, theme.WINDOW_BORDER, miniwin.pen_solid, 1)
        end
        
        -- Draw active tab indicator line at bottom
        if draw_underline then
            WindowLine(Win, tab_left + 2, tab_top + TAB_HEIGHT + 2, tab_left + tab_width - 2, tab_top + TAB_HEIGHT + 2, theme.TAB_ACTIVE_TEXT, miniwin.pen_solid, 2)
        end
        
        -- Draw tab text centered vertically
        WindowText(Win, "titlefont"..Win, tab_name, tab_left + TAB_PADDING, tab_top + 5, 0, 0, text_color, false)
        
        -- Add hotspot
        WindowAddHotspot(Win, "tab"..i, tab_left, tab_top + 2, tab_left + tab_width, tab_top + TAB_HEIGHT + 2,
            "TabMouseOver", "TabCancelMouseOver", "TabMouseDown", "", "TabMouseUp", "", miniwin.cursor_hand, 0)
        
        tab_left = tab_left + tab_width + TAB_SPACING
    end
end

function TabMouseOver(flags, hotspot_id)
    mouseover_tab = tonumber(hotspot_id:match("tab(%d+)"))
    refresh()
end

function TabCancelMouseOver(flags, hotspot_id)
    mouseover_tab = nil
    refresh()
end

function TabMouseDown(flags, hotspot_id)
    local tab_num = tonumber(hotspot_id:match("tab(%d+)"))
    if tab_num then
        setTab(tab_num)
    end
end

function TabMouseUp(flags, hotspot_id)
    if bit.band(flags, miniwin.hotspot_got_rh_mouse) ~= 0 then
        local tab_num = tonumber(hotspot_id:match("tab(%d+)"))
        if tab_num then
            tab_right_click_menu(tab_num)
        end
    end
end

function ResizeMoveCallback()
    posx, posy = WindowInfo (Win, 17), WindowInfo (Win, 18)
    if (WindowTextWidth(Win, "titlefont"..Win, "WWWCOMMUNICATION")+2*SCROLL_BAR_WIDTH <= WINDOW_WIDTH+posx-startx) then
        WINDOW_WIDTH = WINDOW_WIDTH+posx-startx
        startx = posx
    end
    if (3*SCROLL_BAR_WIDTH+10+line_height+theme.TITLE_HEIGHT <= WINDOW_HEIGHT+posy-starty) then
        WINDOW_HEIGHT = WINDOW_HEIGHT+posy-starty
        starty = posy
    end
    init(false)
end

function ResizeReleaseCallback()
    WINDOW_HEIGHT = theme.TITLE_HEIGHT+(num_tabs > 1 and TAB_HEIGHT + 4 or 0)+(line_height*(WINDOW_LINES-1))+3
    init(true)
end

function OnPluginInstall()
    check (WindowCreate (Win, 0, 0, 1, 1, 0, 0, theme.WINDOW_BACKGROUND) )
    check (WindowFont(Win, "bodyfont"..Win, BODY_FONT_NAME, BODY_FONT_SIZE))
    check (WindowFont(Win, "titlefont"..Win, theme.TITLE_FONT_NAME, theme.TITLE_FONT_SIZE))
    font_height = WindowFontInfo (Win, "bodyfont"..Win, 1) -  WindowFontInfo (Win, "bodyfont"..Win, 4) + 1
    line_height = font_height+1
    font_width = WindowTextWidth (Win, "bodyfont"..Win, "W")
    
    windowinfo = movewindow.install (Win, miniwin.pos_top_right, miniwin.create_absolute_location, true)

    if date_format == nil then
        date_format = "[%d %b %H:%M:%S] "
    end
    if WINDOW_WIDTH == nil then
        WINDOW_WIDTH = (font_width*80)+SCROLL_BAR_WIDTH
    end
    if WINDOW_HEIGHT == nil then
        WINDOW_HEIGHT = theme.TITLE_HEIGHT+(num_tabs > 1 and TAB_HEIGHT + 4 or 0)+(line_height*6)+2
    end
    init(true)
    OnPluginEnable()
end

function init(firstTime)
    local tab_area_height = (num_tabs > 1) and (TAB_HEIGHT + 4) or 0
    
    WINDOW_LINES = math.ceil((WINDOW_HEIGHT-theme.TITLE_HEIGHT-tab_area_height)/line_height)
    WINDOW_COLUMNS = math.ceil((WINDOW_WIDTH-SCROLL_BAR_WIDTH)/font_width)

    if firstTime then
        WindowCreate(Win, windowinfo.window_left, windowinfo.window_top, WINDOW_WIDTH, WINDOW_HEIGHT, windowinfo.window_mode, windowinfo.window_flags, theme.WINDOW_BACKGROUND)

        local text_top = theme.TITLE_HEIGHT + tab_area_height
        WindowAddHotspot(Win, "textarea", 0, text_top, WINDOW_WIDTH-SCROLL_BAR_WIDTH,0, 
            "", "", "MouseDown", "CancelMouseDown", "MouseUp", "", 
            miniwin.cursor_ibeam, 0)
        WindowScrollwheelHandler(Win, "textarea", "MouseWheel")
        
        movewindow.add_drag_handler (Win, 0, 0, 0, theme.TITLE_HEIGHT)
        
        WindowAddHotspot(Win, "up", WINDOW_WIDTH-SCROLL_BAR_WIDTH, text_top, 0, text_top+SCROLL_BAR_WIDTH, 
            "MouseOver", "CancelMouseOver", "MouseDown", "CancelMouseDown", "MouseUp", "", 
            miniwin.cursor_hand, 0)
        WindowAddHotspot(Win, "down", WINDOW_WIDTH-SCROLL_BAR_WIDTH, WINDOW_HEIGHT-(2*SCROLL_BAR_WIDTH), 0, WINDOW_HEIGHT-SCROLL_BAR_WIDTH, 
            "MouseOver", "CancelMouseOver", "MouseDown", "CancelMouseDown", "MouseUp", "", 
            miniwin.cursor_hand, 0)

        WindowAddHotspot(Win, "resizer", WINDOW_WIDTH-SCROLL_BAR_WIDTH, WINDOW_HEIGHT-SCROLL_BAR_WIDTH, WINDOW_WIDTH, WINDOW_HEIGHT, 
            "MouseOver", "CancelMouseOver", "MouseDown", "CancelMouseDown", "MouseUp", "", 
            miniwin.cursor_nw_se_arrow, 0)
        WindowDragHandler(Win, "resizer", "ResizeMoveCallback", "ResizeReleaseCallback", 0)    
    else
        local text_top = theme.TITLE_HEIGHT + tab_area_height
        WindowResize(Win, WINDOW_WIDTH, WINDOW_HEIGHT, theme.WINDOW_BACKGROUND)
        WindowMoveHotspot(Win, "textarea", 0, text_top, WINDOW_WIDTH-SCROLL_BAR_WIDTH, 0)
        WindowMoveHotspot(Win, "up", WINDOW_WIDTH-SCROLL_BAR_WIDTH, text_top, 0, text_top+SCROLL_BAR_WIDTH)
        WindowMoveHotspot(Win, "down", WINDOW_WIDTH-SCROLL_BAR_WIDTH, WINDOW_HEIGHT-(2*SCROLL_BAR_WIDTH), 0, WINDOW_HEIGHT-SCROLL_BAR_WIDTH)
        WindowMoveHotspot(Win, "resizer", WINDOW_WIDTH-SCROLL_BAR_WIDTH, WINDOW_HEIGHT-SCROLL_BAR_WIDTH, WINDOW_WIDTH, 0)
    end
    
    WindowShow(Win, true)
    
    if (firstTime == true) then
        lines = {}
        for _,styles in ipairs(rawlines) do 
            fillBuffer(styles)
        end
    end

    lineStart = math.max(1, #lines-WINDOW_LINES+2)
    lineEnd = math.max(1, #lines)
    
    tabs_lineStart[current_tab] = lineStart
    tabs_lineEnd[current_tab] = lineEnd
    
    refresh()
end

function OnPluginClose ()
    if GetPluginInfo (GetPluginID(), 17) then
        OnPluginDisable()
    end
end

function OnPluginEnable ()
    WindowShow (Win, true)
end

function OnPluginSaveState ()
    SetVariable ("enabled", tostring (GetPluginInfo (GetPluginID(), 17)))
    movewindow.save_state (Win)
    SetVariable ("echo", tostring (echo))
    SetVariable ("timestamp", tostring (timestamp))
    SetVariable("date_format", date_format)
    SetVariable("WINDOW_WIDTH", WINDOW_WIDTH)
    SetVariable("WINDOW_HEIGHT", WINDOW_HEIGHT)
    SetVariable("num_tabs", num_tabs)
    SetVariable("current_tab", current_tab)
    SetVariable("tabs_names", serialize.save("tabs_names"))
    SetVariable("tabs_activity", serialize.save("tabs_activity"))
    SetVariable("tabs_filters", serialize.save("tabs_filters"))
end

function OnPluginDisable ()
    WindowShow( Win, false )
end

function Display_Line (line, styles)
    local tab_area_height = (num_tabs > 1) and (TAB_HEIGHT + 4) or 0
    local left    = TEXT_INSET
    local top     = theme.TITLE_HEIGHT + tab_area_height + (line * line_height) + 1
    local bottom  = top + line_height
    local font    = "bodyfont" .. Win

    if backfill then
        WindowRectOp (Win, miniwin.rect_fill, 1, top, WINDOW_WIDTH - SCROLL_BAR_WIDTH, bottom, ColourNameToRGB("#333333"))
    end
  
    if (styles) then
        for _, style in ipairs (styles) do
            local width = WindowTextWidth (Win, font, style.text)
            local right = left + width
            WindowRectOp (Win, miniwin.rect_fill, left, top, right, bottom, style.backcolour)
            WindowText (Win, font, style.text, left, top, 0, 0, style.textcolour)
            left = left + width
        end
    end
end

function writeLines()
    for count = lineStart, lineEnd do
        Display_Line( count-lineStart, lines[count][1], false )
    end
    Redraw()
end

function refresh()
    WindowRectOp(Win, miniwin.rect_fill, 0, 0, WINDOW_WIDTH, WINDOW_HEIGHT, theme.WINDOW_BACKGROUND)
    drawStuff()
end

barPos = ""
barSize = ""
totalSteps = ""

function drawStuff()
    local tab_area_height = (num_tabs > 1) and (TAB_HEIGHT + 4) or 0
    
    -- Draw main window border
    WindowRectOp (Win, miniwin.rect_frame, 0, 0, WINDOW_WIDTH, WINDOW_HEIGHT, theme.WINDOW_BORDER)
    
    -- Title bar with gradient effect
    WindowRectOp(Win, miniwin.rect_fill, 1, 1, WINDOW_WIDTH - 1, theme.TITLE_HEIGHT, theme.FACE)
    WindowLine(Win, 1, theme.TITLE_HEIGHT, WINDOW_WIDTH - 1, theme.TITLE_HEIGHT, theme.WINDOW_BORDER, miniwin.pen_solid, 1)

    -- Title text with shadow effect
    WindowText(Win, "titlefont"..Win, "COMMUNICATION", ((WINDOW_WIDTH)-(7.5*line_height))/2 + 1, (theme.TITLE_HEIGHT-line_height)/2 + 1, 0, 0, theme.INNERSHADOW, false)
    WindowText(Win, "titlefont"..Win, "COMMUNICATION", ((WINDOW_WIDTH)-(7.5*line_height))/2, (theme.TITLE_HEIGHT-line_height)/2, 0, 0, theme.DETAIL, false)

    drawTabs()

    if #lines >= 1 then
        writeLines()
    end
        
    local text_top = theme.TITLE_HEIGHT + tab_area_height
    
    -- Sleeker scrollbar
    WindowRectOp(Win, miniwin.rect_fill, WINDOW_WIDTH-SCROLL_BAR_WIDTH, text_top, WINDOW_WIDTH, WINDOW_HEIGHT, theme.BACK_FACE)
    
    -- Scrollbar buttons with cleaner look
    WindowRectOp(Win, miniwin.rect_fill, WINDOW_WIDTH-SCROLL_BAR_WIDTH + 1, text_top + 1, WINDOW_WIDTH - 1, text_top + SCROLL_BAR_WIDTH - 1, theme.FACE)
    WindowRectOp(Win, miniwin.rect_frame, WINDOW_WIDTH-SCROLL_BAR_WIDTH + 1, text_top + 1, WINDOW_WIDTH - 1, text_top + SCROLL_BAR_WIDTH - 1, theme.WINDOW_BORDER)
    
    WindowRectOp(Win, miniwin.rect_fill, WINDOW_WIDTH-SCROLL_BAR_WIDTH + 1, WINDOW_HEIGHT-(2*SCROLL_BAR_WIDTH) + 1, WINDOW_WIDTH - 1, WINDOW_HEIGHT-SCROLL_BAR_WIDTH - 1, theme.FACE)
    WindowRectOp(Win, miniwin.rect_frame, WINDOW_WIDTH-SCROLL_BAR_WIDTH + 1, WINDOW_HEIGHT-(2*SCROLL_BAR_WIDTH) + 1, WINDOW_WIDTH - 1, WINDOW_HEIGHT-SCROLL_BAR_WIDTH - 1, theme.WINDOW_BORDER)
    
    -- Up arrow
    points = string.format ("%i,%i,%i,%i,%i,%i", (WINDOW_WIDTH-SCROLL_BAR_WIDTH)+4, text_top+9,(WINDOW_WIDTH-SCROLL_BAR_WIDTH)+7, text_top+5,(WINDOW_WIDTH-SCROLL_BAR_WIDTH)+10, text_top+9)
    WindowPolygon (Win, points, theme.DETAIL, miniwin.pen_solid, 1, theme.DETAIL, miniwin.brush_solid, true, false)

    -- Down arrow    
    points = string.format ("%i,%i,%i,%i,%i,%i", (WINDOW_WIDTH-SCROLL_BAR_WIDTH)+4, (WINDOW_HEIGHT-SCROLL_BAR_WIDTH)-9,(WINDOW_WIDTH-SCROLL_BAR_WIDTH)+7, (WINDOW_HEIGHT-SCROLL_BAR_WIDTH)-5, (WINDOW_WIDTH-SCROLL_BAR_WIDTH)+10,(WINDOW_HEIGHT-SCROLL_BAR_WIDTH)-9)
    WindowPolygon (Win, points, theme.DETAIL, miniwin.pen_solid, 1, theme.DETAIL, miniwin.brush_solid, true, false)
    
    -- The scrollbar position indicator
    totalSteps = #lines
    if (totalSteps <= WINDOW_LINES-1) then totalSteps = 1 end
    SCROLL_BAR_HEIGHT = (WINDOW_HEIGHT-(3*SCROLL_BAR_WIDTH)-text_top)
    if (not dragscrolling) then
        stepNum = lineStart-1
        barPos = SCROLL_BAR_WIDTH +text_top+ ((SCROLL_BAR_HEIGHT/totalSteps) * stepNum)
        barSize = (SCROLL_BAR_HEIGHT/math.max(WINDOW_LINES-1,totalSteps)) * (WINDOW_LINES-1)
        if barSize < 10 then
            barSize = 10
        end
        if barPos+barSize > SCROLL_BAR_WIDTH+text_top+SCROLL_BAR_HEIGHT then
            barPos = SCROLL_BAR_WIDTH+text_top+SCROLL_BAR_HEIGHT - barSize
        end
        WindowAddHotspot(Win, "scroller", (WINDOW_WIDTH-SCROLL_BAR_WIDTH), barPos, WINDOW_WIDTH, barPos+barSize, 
                        "MouseOver", "CancelMouseOver", "MouseDown", "CancelMouseDown", "MouseUp", "", 
                        miniwin.cursor_hand, 0)
        WindowDragHandler(Win, "scroller", "ScrollerMoveCallback", "ScrollerReleaseCallback", 0)
    end
    
    -- Modern scrollbar thumb
    WindowRectOp(Win, miniwin.rect_fill, WINDOW_WIDTH-SCROLL_BAR_WIDTH + 2, barPos, WINDOW_WIDTH - 2, barPos+barSize, theme.HIGHLIGHT)
    WindowRectOp(Win, miniwin.rect_frame, WINDOW_WIDTH-SCROLL_BAR_WIDTH + 2, barPos, WINDOW_WIDTH - 2, barPos+barSize, theme.WINDOW_BORDER)
    
    -- Sleeker resize tag
    WindowRectOp(Win, miniwin.rect_fill, WINDOW_WIDTH-SCROLL_BAR_WIDTH, WINDOW_HEIGHT-SCROLL_BAR_WIDTH, WINDOW_WIDTH, WINDOW_HEIGHT, theme.FACE)
    WindowLine(Win, WINDOW_WIDTH-10, WINDOW_HEIGHT-4, WINDOW_WIDTH-4, WINDOW_HEIGHT-4, theme.WINDOW_BORDER, miniwin.pen_solid, 1)
    WindowLine(Win, WINDOW_WIDTH-10, WINDOW_HEIGHT-7, WINDOW_WIDTH-7, WINDOW_HEIGHT-4, theme.WINDOW_BORDER, miniwin.pen_solid, 1)
    WindowLine(Win, WINDOW_WIDTH-10, WINDOW_HEIGHT-10, WINDOW_WIDTH-10, WINDOW_HEIGHT-4, theme.WINDOW_BORDER, miniwin.pen_solid, 1)
    
    Redraw()
end

function ScrollerMoveCallback(flags, hotspot_id)
    local tab_area_height = (num_tabs > 1) and (TAB_HEIGHT + 4) or 0
    local text_top = theme.TITLE_HEIGHT + tab_area_height
    
    mouseposy = WindowInfo(Win, 18)
    windowtop = WindowInfo(Win, 2)
    barPos = math.max(mouseposy-windowtop+clickdelta, SCROLL_BAR_WIDTH+text_top)
    if barPos > WINDOW_HEIGHT-(SCROLL_BAR_WIDTH*2)-barSize then
        barPos = WINDOW_HEIGHT-(SCROLL_BAR_WIDTH*2)-barSize
        lineStart = math.max(1,#lines-WINDOW_LINES+2)
        lineEnd = #lines
    else
        lineStart = math.floor((barPos-SCROLL_BAR_WIDTH-text_top)/(SCROLL_BAR_HEIGHT/totalSteps)+1)
        lineEnd = math.min(lineStart + WINDOW_LINES-2, #lines)
    end
    
    tabs_lineStart[current_tab] = lineStart
    tabs_lineEnd[current_tab] = lineEnd
    refresh()
end

function ScrollerReleaseCallback(flags, hotspot_id)
    dragscrolling = false
    refresh()
end

function fillBuffer(rawstyles)
    local avail = 0
    local line_styles
    local beginning = true
    local styles = copytable.deep (rawstyles)
    local remove = table.remove
    local insert = table.insert
    while #styles > 0 do
        if avail <= 0 then
            if #lines >= MAX_LINES then
                remove (lines, 1)
            end
            avail = WINDOW_WIDTH - (TEXT_INSET * 2) - 9
            line_styles = {}
            add_line( line_styles, beginning )
            beginning = false
        end

        local style = remove (styles, 1)
        local width = WindowTextWidth (Win, "bodyfont"..Win, style.text)

        if width <= avail then
            insert (line_styles, style)
            avail = avail - width
        else
            local col = style.length - 1
            local split_col
            while col > 1 do
                width = WindowTextWidth (Win, "bodyfont"..Win, style.text:sub (1, col)) 
                if width <= avail then
                    if not split_col then
                        split_col = col
                    end
                    if style.text:sub (col, col) == " " then
                        split_col = col
                        break
                    end
                end
                col = col - 1
            end
          
            if split_col then
                insert (line_styles, style)
                local style_copy = copytable.shallow (style)
                style.text = style.text:sub (1, split_col)
                style.length = split_col 
                style_copy.text = style_copy.text:sub (split_col + 1)
                style_copy.length = #style_copy.text
                insert (styles, 1, style_copy)
            elseif next (line_styles) == nil then
                insert (line_styles, style)
            else
                insert (styles, 1, style)
            end
            avail = 0
        end
    end
end

function chats (name, line, wildcards, styles)
    if echo then
        for _, v in ipairs (styles) do
            ColourTell (RGBColourToName (v.textcolour),RGBColourToName (v.backcolour),v.text)
        end
        Note ("")
    end

    if timestamp then
        local tstamp = os.date (date_format)
        table.insert (styles, 1, {
          text = tstamp,
          textcolour  = ColourNameToRGB (TIMESTAMP_TEXT_COLOUR),
          backcolour = ColourNameToRGB (TIMESTAMP_BACK_COLOUR),
          length = string.len (tstamp),
          style = 0,
        } )
    end
    
    -- Get the chat type based on trigger name
    local chat_type = getChatType(name)
    
    local need_refresh = false
    
    -- Add to each tab that has this chat type enabled in its filter
    for tab = 1, num_tabs do
        if tabs_filters[tab][chat_type] then
            local saved_lines = lines
            local saved_rawlines = rawlines
            local saved_lineStart = lineStart
            local saved_lineEnd = lineEnd
            
            lines = tabs_lines[tab]
            rawlines = tabs_rawlines[tab]
            lineStart = tabs_lineStart[tab]
            lineEnd = tabs_lineEnd[tab]
            
            if #rawlines >= MAX_LINES then
                table.remove(rawlines, 1)
            end
            table.insert(rawlines, copytable.deep(styles))
            
            fillBuffer(styles)
            
            tabs_lines[tab] = lines
            tabs_rawlines[tab] = rawlines
            tabs_lineStart[tab] = lineStart
            tabs_lineEnd[tab] = lineEnd
            
            if tab == current_tab then
                -- Message added to current tab, need to refresh
                need_refresh = true
            else
                tabs_activity[tab] = true
            end
            
            lines = saved_lines
            rawlines = saved_rawlines
            lineStart = saved_lineStart
            lineEnd = saved_lineEnd
        end
    end
    
    -- Only refresh if a message was added to the current tab
    if need_refresh then
        -- Update current tab pointers
        lines = tabs_lines[current_tab]
        rawlines = tabs_rawlines[current_tab]
        lineStart = tabs_lineStart[current_tab]
        lineEnd = tabs_lineEnd[current_tab]
        refresh()
    end
end

function add_line ( line, is_beginning_of_message )
    table.insert (lines, {line, false} )
    lines[#lines][2] = is_beginning_of_message

    if #lines >= WINDOW_LINES then
        lineStart = lineStart + 1
    end
        
    if #lines > 1 then
        lineEnd = lineEnd + 1
    end
end

keepscrolling = false
require "wait"

function scrollbar(calledBy)
    local tab_area_height = (num_tabs > 1) and (TAB_HEIGHT + 4) or 0
    local text_top = theme.TITLE_HEIGHT + tab_area_height
    
    wait.make (function()
        while keepscrolling == true do
            if calledBy == "up" then
                if (lineStart > 1) then
                    lineStart = lineStart - 1
                    lineEnd = lineEnd - 1
                    WindowRectOp(Win, miniwin.rect_draw_edge, (WINDOW_WIDTH-SCROLL_BAR_WIDTH), text_top, 0, text_top+SCROLL_BAR_WIDTH, 
                        miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all + miniwin.rect_option_fill_middle)
                    points = string.format ("%i,%i,%i,%i,%i,%i", (WINDOW_WIDTH-SCROLL_BAR_WIDTH)+3, text_top+9,(WINDOW_WIDTH-SCROLL_BAR_WIDTH)+7, text_top+5,(WINDOW_WIDTH-SCROLL_BAR_WIDTH)+11, text_top+9)
                    WindowPolygon (Win, points, theme.DETAIL, miniwin.pen_solid, 1, theme.DETAIL, miniwin.brush_solid, true, false)
                else
                    keepscrolling = false
                end
            elseif calledBy == "down" then
                if (lineEnd < #lines) then
                    lineStart = lineStart + 1
                    lineEnd = lineEnd + 1
                WindowRectOp(Win, miniwin.rect_draw_edge, (WINDOW_WIDTH-SCROLL_BAR_WIDTH), WINDOW_HEIGHT-(SCROLL_BAR_WIDTH*2), 0, WINDOW_HEIGHT-SCROLL_BAR_WIDTH-1, 
                    miniwin.rect_edge_sunken,  miniwin.rect_edge_at_all + miniwin.rect_option_fill_middle)
                points = string.format ("%i,%i,%i,%i,%i,%i", (WINDOW_WIDTH-SCROLL_BAR_WIDTH)+3, (WINDOW_HEIGHT-SCROLL_BAR_WIDTH)-11,(WINDOW_WIDTH-SCROLL_BAR_WIDTH)+7, (WINDOW_HEIGHT-SCROLL_BAR_WIDTH)-7, (WINDOW_WIDTH-SCROLL_BAR_WIDTH)+11,(WINDOW_HEIGHT-SCROLL_BAR_WIDTH)-11)
                WindowPolygon (Win, points, theme.DETAIL, miniwin.pen_solid, 1, theme.DETAIL, miniwin.brush_solid, true, false)
                else
                    keepscrolling = false
                end
            end
            tabs_lineStart[current_tab] = lineStart
            tabs_lineEnd[current_tab] = lineEnd
            wait.time(0.1)
            refresh()
        end
    end)
end

function GetLineText (styles)
  local t = {}
  for _, style in ipairs (styles) do
    table.insert (t, style.text)
  end
  return table.concat (t)
end

function GetAllBufferedMessages()
    local t = {}
    for _,styles in ipairs(rawlines) do
      table.insert (t, GetLineText (styles))
    end
    SetClipboard(table.concat(t,"\r\n"))
end

function GetBufferedMessage(xpos, ypos)
    local tab_area_height = (num_tabs > 1) and (TAB_HEIGHT + 4) or 0
    windowline = math.floor(((ypos-theme.TITLE_HEIGHT-tab_area_height)/line_height)+1)-1
    text = ""
    if (#lines > windowline) then
        local line = windowline+lineStart
        while lines[line][2] ~= true and line > 1 do
            line = line - 1
        end
        local styles = copytable.deep(lines[line][1])
        if (line-lineStart+1 > 0) then
            Display_Line (line-lineStart, styles, true)
        end
        text = GetLineText (styles)
        line = line + 1
        while line <= #lines and lines[line][2] ~= true do
            local styles = copytable.deep(lines[line][1])
            if (line-lineStart+1 > 0 and line-lineStart < WINDOW_LINES) then
                Display_Line (line-lineStart, styles, true)
            end
            text = text.. GetLineText (styles)
            line = line + 1
        end
        SetClipboard(text)
    end
    Redraw()
end

function MouseOver(flags, hotspot_id)
    keepscrolling = false
end

function CancelMouseOver(flags, hotspot_id)
    keepscrolling = false
end

function MouseDown(flags, hotspot_id)
    if (hotspot_id == "resizer") then
        startx, starty = WindowInfo (Win, 17), WindowInfo (Win, 18)
    elseif (hotspot_id == "scroller") then
        clickdelta = WindowHotspotInfo(Win, "scroller", 2)-WindowInfo (Win, 15)
        dragscrolling = true
    elseif (hotspot_id == "textarea" and flags == miniwin.hotspot_got_lh_mouse) then
        GetBufferedMessage(WindowInfo(Win, 14), WindowInfo(Win,15))
    else
        keepscrolling = true
        scrollbar(hotspot_id)
    end
end

function CancelMouseDown(flags, hotspot_id)
    keepscrolling = false
    refresh()
end

function MouseUp(flags, hotspot_id)
    if (hotspot_id == "textarea" and flags == miniwin.hotspot_got_rh_mouse) then
        right_click_menu()
    else
        refresh()
    end
    keepscrolling = false
end

function MouseWheel(flags, hotspot_id)
    local scroll_amount = 3  -- Number of lines to scroll per wheel notch
    
    -- flags contains the wheel delta: positive = scroll up, negative = scroll down
    if flags > 0 then
        -- Scroll down (wheel backward/up scrolls content down)
        if lineEnd < #lines then
            lineStart = math.min(lineStart + scroll_amount, math.max(1, #lines - WINDOW_LINES + 2))
            lineEnd = math.min(lineEnd + scroll_amount, #lines)
            tabs_lineStart[current_tab] = lineStart
            tabs_lineEnd[current_tab] = lineEnd
            refresh()
        end
    else
        -- Scroll up (wheel forward/down scrolls content up)
        if lineStart > 1 then
            lineStart = math.max(lineStart - scroll_amount, 1)
            lineEnd = math.max(lineEnd - scroll_amount, WINDOW_LINES - 1)
            tabs_lineStart[current_tab] = lineStart
            tabs_lineEnd[current_tab] = lineEnd
            refresh()
        end
    end
end

function chat_echo (name, line, wildcards)
    if wildcards [1] == false then
      echo = not echo
    else
      echo = wildcards [1]:lower () == " on"
    end

    if echo then
        ColourNote ("yellow", "", "Echoing chats in main window ENABLED.")
    else
        ColourNote ("yellow", "", "Echoing chats in main window DISABLED.")
    end
end

function chat_help()
    ColourNote("cyan", "", "")
    ColourNote("cyan", "", string.rep("=", 70))
    ColourNote("white", "", "                  COMMUNICATION WINDOW HELP")
    ColourNote("cyan", "", string.rep("=", 70))
    ColourNote("yellow", "", "")
    ColourNote("yellow", "", "BASIC COMMANDS:")
    ColourNote("white", "", "  chats help              ", "lime", "", "- Display this help information")
    ColourNote("white", "", "  chats show              ", "lime", "", "- Show the communication window")
    ColourNote("white", "", "  chats hide              ", "lime", "", "- Hide the communication window")
    ColourNote("white", "", "  chats echo on/off       ", "lime", "", "- Toggle echoing chats in main window")
    ColourNote("yellow", "", "")
    ColourNote("yellow", "", "TAB COMMANDS:")
    ColourNote("white", "", "  chats tab <number>      ", "lime", "", "- Switch to tab number (e.g., 'chats tab 2')")
    ColourNote("white", "", "  chats addtab            ", "lime", "", "- Create a new tab")
    ColourNote("white", "", "  chats nametab <name>    ", "lime", "", "- Name the current tab (e.g., 'chats nametab Tells')")
    ColourNote("white", "", "  chats cleartab          ", "lime", "", "- Clear all messages from current tab")
    ColourNote("yellow", "", "")
    ColourNote("yellow", "", "MOUSE CONTROLS:")
    ColourNote("white", "", "  Left-click on text      ", "lime", "", "- Copy message to clipboard")
    ColourNote("white", "", "  Right-click on text     ", "lime", "", "- Open main context menu")
    ColourNote("white", "", "  Click on tab            ", "lime", "", "- Switch to that tab")
    ColourNote("white", "", "  Right-click on tab      ", "lime", "", "- Tab-specific menu (rename, remove, clear)")
    ColourNote("white", "", "  Drag title bar          ", "lime", "", "- Move the window")
    ColourNote("white", "", "  Drag resize corner      ", "lime", "", "- Resize the window")
    ColourNote("yellow", "", "")
    ColourNote("yellow", "", "TAB FEATURES:")
    ColourNote("white", "", "  - Active tab is highlighted in light gray")
    ColourNote("white", "", "  - Tabs with new activity show in GOLD")
    ColourNote("white", "", "  - All captured messages appear in all tabs")
    ColourNote("white", "", "  - Each tab maintains its own scroll position")
    ColourNote("white", "", "  - Maximum " .. num_tabs .. " tabs currently active")
    ColourNote("yellow", "", "")
    ColourNote("yellow", "", "RIGHT-CLICK MENU OPTIONS:")
    ColourNote("white", "", "  - Copy All To Clipboard     ", "lime", "", "- Copy all messages in current tab")
    ColourNote("white", "", "  - Change Font               ", "lime", "", "- Select new font and size")
    ColourNote("white", "", "  - Turn Echo On/Off          ", "lime", "", "- Toggle main window echoing")
    ColourNote("white", "", "  - Timestamp Options         ", "lime", "", "- Choose timestamp format or disable")
    ColourNote("white", "", "  - Add New Tab               ", "lime", "", "- Create a new tab")
    ColourNote("white", "", "  - Clear Current Tab         ", "lime", "", "- Remove all messages from tab")
    ColourNote("yellow", "", "")
    ColourNote("yellow", "", "TIMESTAMP FORMATS:")
    ColourNote("white", "", "  - No Timestamps             ", "lime", "", "- Disable timestamps")
    ColourNote("white", "", "  - 30 Aug 13:29:49           ", "lime", "", "- Date with 24-hour time")
    ColourNote("white", "", "  - 30 Aug 01:20:12PM         ", "lime", "", "- Date with 12-hour time")
    ColourNote("white", "", "  - 13:29:08                  ", "lime", "", "- 24-hour time only")
    ColourNote("white", "", "  - 1:22:06 PM                ", "lime", "", "- 12-hour time only")
    ColourNote("yellow", "", "")
    ColourNote("yellow", "", "CAPTURED MESSAGES:")
    ColourNote("white", "", "  The plugin captures various chat types including:")
    ColourNote("white", "", "  - Tells, replies, and beeps")
    ColourNote("white", "", "  - Group tells and group chat")
    ColourNote("white", "", "  - Friend channel")
    ColourNote("white", "", "  - Say, ask, and yell")
    ColourNote("white", "", "  - Various game channels (newbie, auction, chat, etc.)")
    ColourNote("white", "", "  - Global messages, quests, and expeditions")
    ColourNote("white", "", "  - Combat and player death announcements")
    ColourNote("white", "", "  - And many more...")
    ColourNote("yellow", "", "")
    ColourNote("cyan", "", string.rep("=", 70))
    ColourNote("white", "", "")
end

function chat_show (name, line, wildcards)
   WindowShow( Win, true )
   ColourNote ("yellow", "", "Chats window now shown. Type 'chats hide' to hide it.")
end

function chat_hide (name, line, wildcards)
   WindowShow( Win, false )
   ColourNote ("yellow", "", "Chats window now hidden. Type 'chats show' to see it again.")
end

function chat_tab (name, line, wildcards)
    local tab_num = tonumber(wildcards[1])
    if tab_num and tab_num >= 1 and tab_num <= num_tabs then
        setTab(tab_num)
        ColourNote ("yellow", "", "Switched to tab " .. tab_num)
    else
        ColourNote ("red", "", "Invalid tab number. Valid range: 1-" .. num_tabs)
    end
end

function chat_addtab (name, line, wildcards)
    addTab()
end

function chat_nametab (name, line, wildcards)
    local tab_name = wildcards[1]
    nameTab(current_tab, tab_name)
end

function chat_cleartab (name, line, wildcards)
    tabs_lines[current_tab] = {}
    tabs_rawlines[current_tab] = {}
    tabs_lineStart[current_tab] = 1
    tabs_lineEnd[current_tab] = 1
    lines = tabs_lines[current_tab]
    rawlines = tabs_rawlines[current_tab]
    lineStart = 1
    lineEnd = 1
    refresh()
    ColourNote ("yellow", "", "Current tab cleared.")
end

function chat_filters (name, line, wildcards)
    configure_tab_filters(current_tab)
end

function tab_right_click_menu(tab_num)
    menustring = "Configure Filters...|Remove Tab|Rename Tab|Clear Tab"
    
    result = WindowMenu (Win, 
        WindowInfo (Win, 14),
        WindowInfo (Win, 15),
        menustring)
        
    if result == "Configure Filters..." then
        configure_tab_filters(tab_num)
    elseif result == "Remove Tab" then
        if num_tabs > 1 then
            table.remove(tabs_names, tab_num)
            table.remove(tabs_activity, tab_num)
            table.remove(tabs_lines, tab_num)
            table.remove(tabs_rawlines, tab_num)
            table.remove(tabs_lineStart, tab_num)
            table.remove(tabs_lineEnd, tab_num)
            table.remove(tabs_filters, tab_num)
            num_tabs = num_tabs - 1
            if current_tab > num_tabs then
                current_tab = num_tabs
            end
            setTab(current_tab)
            ColourNote ("yellow", "", "Tab removed.")
        else
            ColourNote ("red", "", "Cannot remove the last tab.")
        end
    elseif result == "Rename Tab" then
        local name = utils.inputbox("Enter new tab name:", "Rename Tab", tabs_names[tab_num] or "")
        if name then
            nameTab(tab_num, name)
        end
    elseif result == "Clear Tab" then
        tabs_lines[tab_num] = {}
        tabs_rawlines[tab_num] = {}
        tabs_lineStart[tab_num] = 1
        tabs_lineEnd[tab_num] = 1
        if tab_num == current_tab then
            lines = tabs_lines[current_tab]
            rawlines = tabs_rawlines[current_tab]
            lineStart = tabs_lineStart[current_tab]
            lineEnd = tabs_lineEnd[current_tab]
        end
        refresh()
        ColourNote ("yellow", "", "Tab cleared.")
    end
end

function configure_tab_filters(tab_num)
    -- Build the options for multilistbox
    local options = {}
    local defaults = {}
    
    for key, description in pairs(chat_types) do
        options[key] = description
        defaults[key] = tabs_filters[tab_num][key]
    end
    
    local result = utils.multilistbox(
        "Select which chat types to show in this tab:",
        "Configure Tab Filters - " .. (tabs_names[tab_num] or ("Tab " .. tab_num)),
        options,
        defaults
    )
    
    if result then
        -- Update the filters for this tab
        for key, _ in pairs(chat_types) do
            tabs_filters[tab_num][key] = result[key] or false
        end
        SaveState()
        ColourNote("yellow", "", "Tab filters updated.")
    end
end

function right_click_menu ()
    menustring ="Copy All To Clipboard|Change Font|Configure Tab Filters...|Rename Tab...|Turn Echo "
    
    if echo then
        menustring = menustring .. "Off"
    else
        menustring = menustring .. "On"
    end
    
    menustring = menustring.."|>Timestamp|No Timestamps|30 Aug 13:29:49|30 Aug 01:20:12PM|13:29:08|1:22:06 PM|<"
    menustring = menustring.."|Add New Tab|Clear Current Tab"
    
    result = WindowMenu (Win, 
        WindowInfo (Win, 14),
        WindowInfo (Win, 15),
        menustring)
        
    if result == "Copy All To Clipboard" then
        GetAllBufferedMessages()
        ColourNote ("yellow", "", "All buffered messages copied to clipboard.")
    elseif result == "Change Font" then
        wanted_font = utils.fontpicker (BODY_FONT_NAME, BODY_FONT_SIZE)
        if wanted_font then
            BODY_FONT_NAME = wanted_font.name
            BODY_FONT_SIZE = wanted_font.size
            SetVariable ("bodyfont", BODY_FONT_NAME)
            SetVariable ("font_size", BODY_FONT_SIZE)
            OnPluginInstall()
        end
    elseif result == "Configure Tab Filters..." then
        configure_tab_filters(current_tab)
    elseif result == "Rename Tab..." then
        local name = utils.inputbox("Enter new tab name (leave blank to remove name):", "Rename Tab", tabs_names[current_tab] or ("Tab " .. current_tab))
        if name then
            if name:match("^%s*$") then
                -- Empty or whitespace only - remove the name
                tabs_names[current_tab] = nil
                ColourNote("yellow", "", "Tab name removed. Tab " .. current_tab .. " will show default name.")
            else
                nameTab(current_tab, name)
            end
            SaveState()
        end
    elseif result == "Turn Echo Off" then
        echo = false
        ColourNote ("yellow", "", "Echoing chats in main window DISABLED.")
    elseif result == "Turn Echo On" then
        echo = true
        ColourNote ("yellow", "", "Echoing chats in main window ENABLED.")
    elseif result == "No Timestamps" then
        timestamp = false
        ColourNote ("yellow", "", "Timestamps in communication window DISABLED.")
    elseif result == "30 Aug 13:29:49" then
        timestamp = true
        date_format = "[%d %b %H:%M:%S] "
        ColourNote ("yellow", "", "Timestamps in communication window ENABLED using format like '30 Aug 13:29:49'.")
    elseif result == "30 Aug 01:20:12PM" then
        timestamp = true
        date_format = "[%d %b %I:%M:%S%p] "
        ColourNote ("yellow", "", "Timestamps in communication window ENABLED using format like '30 Aug 01:20:12PM'.")
    elseif result == "13:29:08" then
        timestamp = true
        date_format = "[%H:%M:%S] "
        ColourNote ("yellow", "", "Timestamps in communication window ENABLED using format like '13:29:08'.")
    elseif result == "1:22:06 PM" then
        timestamp = true
        date_format = "[%I:%M:%S%p] "
        ColourNote ("yellow", "", "Timestamps in communication window ENABLED using format like '1:22:06 PM'.")
    elseif result == "Add New Tab" then
        addTab()
    elseif result == "Clear Current Tab" then
        tabs_lines[current_tab] = {}
        tabs_rawlines[current_tab] = {}
        tabs_lineStart[current_tab] = 1
        tabs_lineEnd[current_tab] = 1
        lines = tabs_lines[current_tab]
        rawlines = tabs_rawlines[current_tab]
        lineStart = 1
        lineEnd = 1
        refresh()
        ColourNote ("yellow", "", "Current tab cleared.")
    end
end
]]>
</script>
</muclient>